import streamlit as st
import pandas as pd
#import numpy as np
import samplics

from samplics.sampling import SampleSize
from samplics.utils.types import SizeMethod, PopParam
#from st_aggrid import AgGrid
import io



# V√©rifier si l'utilisateur a acc√®s √† cette page
st.title("Sondage al√©atoire simple")
if 'marge' not in st.session_state:
    st.session_state.marge = None
if 'taillePop' not in st.session_state:
    st.session_state.taillePop = None
if 'tauxReponse' not in st.session_state:
    st.session_state.tauxReponse = None
if 'tailleEffet' not in st.session_state:
    st.session_state.tailleEffet = None
if 'parametre' not in st.session_state:
    st.session_state.parametre = None
if 'methode' not in st.session_state:
    st.session_state.methode = None
if 'confiance' not in st.session_state:
    st.session_state.confiance = None
if 'sigma' not in st.session_state:
    st.session_state.sigma = None
if 'prop_est' not in st.session_state:
    st.session_state.prop_est = None
if 'calcul_moy' not in st.session_state:
    st.session_state.calcul = False
if 'calcul_prop' not in st.session_state:
    st.session_state.calcul= False
if 'base_echant_moy' not in st.session_state:
    st.session_state.base_echant = None
if 'df' not in st.session_state:
    st.session_state.df = None
if 'population' not in st.session_state:
    st.session_state.population = None
if 'tauxSondage' not in st.session_state:
    st.session_state.tauxSondage = None
#if 'base_telecharger' not in st.session_state:
#    st.session_state.base_telecharger = None


st.info("Les champs avec l'ast√©risque (*) rouge doivent √™tre obligatoirement remplis")
st.markdown("##### Param√®tre √† estimer <span style='color:red;'>*</span>", unsafe_allow_html=True)
st.session_state.parametre = st.selectbox('Param√®tre √† estimer', ['None', 'Proportion', 'Moyenne'], label_visibility='collapsed')
if st.session_state.parametre == 'Proportion' or st.session_state.parametre == 'Moyenne':
    col1, col2,col3 = st.columns(3)

    with col1:
        if st.session_state.parametre == "Moyenne":
            st.markdown("##### √âcart-type estim√© <span style='color:red;'>*</span>", unsafe_allow_html=True)
            with st.expander("En savoir plus ..."):
                st.info("Si vous avez acc√®s √† des donn√©es provenant d'√©tudes ant√©rieures sur la m√™me population ou des populations similaires, vous pouvez utiliser l'√©cart-type observ√© dans ces √©tudes comme estimation de ùúéœÉ.")
            st.session_state.sigma = st.number_input("Marge d'erreur ", min_value = 0, label_visibility='collapsed')

        if st.session_state.parametre == "Proportion":
            st.markdown("##### Proportion estim√©e <span style='color:red;'>*</span>", unsafe_allow_html=True)
            with st.expander("En savoir plus ..."):
                st.info("Si vous disposez d'√©tudes similaires pr√©c√©dentes vous pouvez utiliser ces r√©sultats. Sinon la valeur prise par d√©faut est 0.5")
            st.session_state.prop_est = st.number_input("Proportion estim√©e", min_value=0.0, max_value= 1.0, step = 0.0001, format="%.4f", label_visibility='collapsed')

        if st.session_state.parametre == "Proportion":
            st.markdown("##### Marge d'erreur <span style='color:red;'>*</span>", unsafe_allow_html=True)
            with st.expander("En savoir plus ..."):
                st.info("La marge d'erreur permet de savoir correspond a la moiti√© de l'√©tendue de l'intervalle de confiance. C'est la valeur qui est ajout√©e et retranch√©e de la proportion estim√©e pour obtenir l'intervalle de confiance")
            st.session_state.marge = st.number_input("Marge d'erreur", min_value=0.0, max_value= 1.0, step = 0.0001, format="%.4f", label_visibility='collapsed')
        
        if st.session_state.parametre == "Moyenne":
            st.markdown("##### Marge d'erreur <span style='color:red;'>*</span>", unsafe_allow_html=True)
            with st.expander("En savoir plus ..."):
                st.info("La marge d'erreur permet de savoir correspond a la moiti√© de l'√©tendue de l'intervalle de confiance. C'est la valeur qui est ajout√©e et retranch√©e de la proportion estim√©e pour obtenir l'intervalle de confiance")
            st.session_state.marge = st.number_input("Marge d'erreur moy ", min_value= 0, label_visibility='collapsed')
    
    with col2:
        st.markdown("##### Niveau de confiance <span style='color:red;'>*</span>", unsafe_allow_html=True)
        with st.expander("En savoir plus ..."):
            st.info("Le niveau de confiance repr√©sente la probabilit√© que vous √™tes pr√™t √† accepter quant √† la possibilit√© que votre estimation soit incorrecte.")
        st.session_state.confiance = st.number_input("Niveau de confiance",min_value=0.0, max_value= 1.0, step = 0.0001, format="%.4f", label_visibility='collapsed')
        
        st.markdown("##### Taille de la population")
        with st.expander("En savoir plus ..."):
            st.info('Taille de la population : Le nombre total d‚Äôindividus dans la population √©tudi√©e. Ce param√®tre est utilis√© pour calculer la taille de l‚Äô√©chantillon.')
        st.session_state.population = st.number_input("Taille de la population", min_value = 1, value=st.session_state.taillePop, label_visibility='collapsed')

    
    with col3:
        st.markdown("##### Taux de r√©ponse <span style='color:red;'>*</span>", unsafe_allow_html=True)
        with st.expander("En savoir plus ..."):
            st.info("Le taux de r√©ponse est le pourcentage de personnes ayant r√©pondu √† un sondage par rapport au nombre total de personnes sollicit√©es. Assurez-vous d'atteindre ce taux de r√©ponse au risque de ne pas avoir des estimations pr√©cises.")
        st.session_state.tauxReponse = st.number_input("Taux de r√©ponse", min_value=0.0, max_value= 1.0, step = 0.0001, format="%.4f", label_visibility='collapsed')

        st.markdown("##### Effet de plan <span style='color:red;'>*</span>", unsafe_allow_html=True)
        with st.expander("En savoir plus ..."):
            st.info("L'effet de plan est un facteur utilis√© dans les enqu√™tes pour ajuster la taille d'√©chantillon n√©cessaire lorsque le plan d'√©chantillonnage diff√®re d'un simple √©chantillonnage al√©atoire. Il mesure l'impact du plan d'√©chantillonnage sur la pr√©cision des estimations. Si vous utilisez un plan d'√©chantillonnage stratifi√© ou en grappes, par exemple, l'effet de plan prend en compte la corr√©lation au sein des groupes ou des strates, ce qui peut augmenter la variance des estimations. Un effet de plan sup√©rieur √† 1 signifie que la taille de l'√©chantillon doit √™tre augment√©e pour maintenir la m√™me pr√©cision. Comme nous sommes dans le cas d'un sondage al√©atoire simple, l'effet de plan est de 1")
        st.session_state.tailleEffet =  st.selectbox("Effet de plan",[1], label_visibility='collapsed')




    # Calcul de la taille dans le cas d'une proportion
    if st.session_state.parametre == "Proportion":
        st.session_state.methode = SampleSize(param=PopParam.prop, method=SizeMethod.wald, strat=False)
    if st.session_state.parametre == "Proportion":
        if st.session_state.methode is not None and st.session_state.tailleEffet != 0 and st.session_state.tauxReponse != 0 and st.session_state.taillePop != 0 and st.session_state.marge != 0:
            def calcul_taille():
                st.session_state.methode.calculate(
                    target = st.session_state.prop_est, 
                    half_ci=st.session_state.marge,
                    deff=st.session_state.tailleEffet, 
                    resp_rate=st.session_state.tauxReponse,
                    pop_size = st.session_state.population,
                    alpha = 1 - st.session_state.confiance)
                st.session_state.echantillon = st.session_state.methode.samp_size
            st.session_state.calcul = st.button("Calculer la taille",help="Cliquer pour lancer le calcul de la taille",on_click=calcul_taille)


    # Calcul de la taille dans le cas d'une moyenne
    if st.session_state.parametre == "Moyenne":
        st.session_state.methode = SampleSize(param=PopParam.mean, method=SizeMethod.wald, strat=False)
    if st.session_state.parametre == "Moyenne":
        if st.session_state.methode is not None and st.session_state.tailleEffet != 0 and st.session_state.tauxReponse != 0 and st.session_state.taillePop != 0 and st.session_state.marge != 0:
            def calcul_taille():
                st.session_state.methode.calculate(
                    sigma = st.session_state.sigma,
                    half_ci=st.session_state.marge,
                    deff=st.session_state.tailleEffet, 
                    resp_rate=st.session_state.tauxReponse,
                    pop_size = st.session_state.population,
                    alpha = 1 - st.session_state.confiance)
                st.session_state.echantillon = st.session_state.methode.samp_size
            st.session_state.calcul = st.button("Calculer la taille",help="Cliquer pour lancer le calcul de la taille",on_click=calcul_taille)

    if st.session_state.calcul:
        st.markdown('### R√©sultats')
        st.write(f"#### **Taille d'√©chantillon**:", st.session_state.echantillon)
        if st.session_state.population is not None:
            st.session_state.tauxSondage = round(st.session_state.echantillon / st.session_state.population,4)
            st.write("**Taux de sondage**: ",st.session_state.tauxSondage)
        if st.session_state.df is not None:
            with st.expander("Plus d'options"):
                st.write("*Echantillon tir√©*",unsafe_allow_html=True)
                st.session_state.base_echant = st.session_state.df.sample(n = st.session_state.echantillon, random_state = 42)
                st.dataframe(st.session_state.base_echant)
            









