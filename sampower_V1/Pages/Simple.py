import streamlit as st
import pandas as pd
#import numpy as np
import samplics

from samplics.sampling import SampleSize
from samplics.utils.types import SizeMethod, PopParam
from st_aggrid import AgGrid
import io
from fpdf import FPDF
#import sympy as sp
import matplotlib.pyplot as plt
import io
import os
from docx import Document
from docx.shared import Inches
import io
from datetime import datetime



# V√©rifier si l'utilisateur a acc√®s √† cette page
st.markdown("<h1 style='color:#2fd5cf; text-align: center;'>Sondage al√©atoire simple </h1>", unsafe_allow_html=True)
if 'marge' not in st.session_state:
    st.session_state.marge = None
if 'taillePop' not in st.session_state:
    st.session_state.taillePop = None
if 'tauxReponse' not in st.session_state:
    st.session_state.tauxReponse = None
if 'tailleEffet' not in st.session_state:
    st.session_state.tailleEffet = None
if 'parametre' not in st.session_state:
    st.session_state.parametre = None
if 'methode' not in st.session_state:
    st.session_state.methode = None
if 'confiance' not in st.session_state:
    st.session_state.confiance = None
if 'sigma' not in st.session_state:
    st.session_state.sigma = None
if 'prop_est' not in st.session_state:
    st.session_state.prop_est = None
if 'calcul_moy' not in st.session_state:
    st.session_state.calcul = False
if 'calcul_prop' not in st.session_state:
    st.session_state.calcul= False
if 'base_echant_moy' not in st.session_state:
    st.session_state.base_echant = None
if 'df' not in st.session_state:
    st.session_state.df = None
if 'population' not in st.session_state:
    st.session_state.population = None
if 'tauxSondage' not in st.session_state:
    st.session_state.tauxSondage = None
#if 'base_telecharger' not in st.session_state:
#    st.session_state.base_telecharger = None

if 'marge' not in st.session_state:
    st.session_state.marge = None
if 'taillePop' not in st.session_state:
    st.session_state.taillePop = None
if 'tauxReponse' not in st.session_state:
    st.session_state.tauxReponse = None
if 'tailleEffet' not in st.session_state:
    st.session_state.tailleEffet = None
if 'parametre' not in st.session_state:
    st.session_state.parametre = None
if 'methode' not in st.session_state:
    st.session_state.methode = None
if 'confiance' not in st.session_state:
    st.session_state.confiance = None
if 'sigma' not in st.session_state:
    st.session_state.sigma = None
if 'prop_est' not in st.session_state:
    st.session_state.prop_est = None
if 'echantillon' not in st.session_state:
    st.session_state.echantillon = None
if 'calcul' not in st.session_state:
    st.session_state.calcul = False
if 'base_echant' not in st.session_state:
    st.session_state.base_echant = None
if 'df' not in st.session_state:
    st.session_state.df = None
if 'population' not in st.session_state:
    st.session_state.population = None
if 'type_alloc' not in st.session_state:
    st.session_state.type_alloc = None
if 'type' not in st.session_state:
    st.session_state.type = None
if 'marge_strat' not in st.session_state:
    st.session_state.marge_strat = None
if 'taillePop' not in st.session_state:
    st.session_state.taillePop = None
if 'tauxReponse_strat' not in st.session_state:
    st.session_state.tauxReponse_strat = None
if 'tailleEffet_strat' not in st.session_state:
    st.session_state.tailleEffet_strat = None
if 'parametre_strat' not in st.session_state:
    st.session_state.parametre_strat = None
if 'methode_strat' not in st.session_state:
    st.session_state.methode_strat = None
if 'confiance_strat' not in st.session_state:
    st.session_state.confiance_strat = None
if 'sigma_strat' not in st.session_state:
    st.session_state.sigma_strat = None
if 'prop_est_strat' not in st.session_state:
    st.session_state.prop_est_strat = None
if 'calcul_strat' not in st.session_state:
    st.session_state.calcul_strat = False
if 'echantillon_strat' not in st.session_state:
    st.session_state.echantillon_strat = None
if 'base_echant_strat' not in st.session_state:
    st.session_state.base_echant_strat = None
if 'df' not in st.session_state:
    st.session_state.df = None
if 'population_strat' not in st.session_state:
    st.session_state.population_strat = None
if 'variable_strat' not in st.session_state:
    st.session_state.variable_strat = None
if 'type_alloc' not in st.session_state:
    st.session_state.type_alloc = None
if 'modality_count' not in st.session_state:
    st.session_state.modality_count = None
if 'resultat' not in st.session_state:
    st.session_state.resultat = None
if 'tauxSondage' not in st.session_state:
    st.session_state.tauxSondage = None
if 'tauxSondage_strat' not in st.session_state:
    st.session_state.tauxSondage_strat = None
if 'tot_taille' not in st.session_state:
    st.session_state.tot_taille = None

st.info("Les champs avec l'ast√©risque (*) rouge doivent √™tre obligatoirement remplis")
st.markdown("##### Param√®tre √† estimer <span style='color:red;'>*</span>", unsafe_allow_html=True)
st.session_state.parametre = st.selectbox('Param√®tre √† estimer', ['None', 'Proportion', 'Moyenne'], label_visibility='collapsed')
if st.session_state.parametre == 'Proportion' or st.session_state.parametre == 'Moyenne':
    col1, col2,col3 = st.columns(3)

    with col1:
        if st.session_state.parametre == "Moyenne":
            st.markdown("##### √âcart-type estim√© <span style='color:red;'>*</span>", unsafe_allow_html=True)
            with st.expander("En savoir plus ..."):
                st.info("Si vous avez acc√®s √† des donn√©es provenant d'√©tudes ant√©rieures sur la m√™me population ou des populations similaires, vous pouvez utiliser l'√©cart-type observ√© dans ces √©tudes comme estimation de ùúéœÉ.")
            st.session_state.sigma = st.number_input("Marge d'erreur ", min_value = 0, label_visibility='collapsed')

        if st.session_state.parametre == "Proportion":
            st.markdown("##### Proportion estim√©e <span style='color:red;'>*</span>", unsafe_allow_html=True)
            with st.expander("En savoir plus ..."):
                st.info("Si vous disposez d'√©tudes similaires pr√©c√©dentes vous pouvez utiliser ces r√©sultats. Sinon la valeur prise par d√©faut est 0.5")
            st.session_state.prop_est = st.number_input("Proportion estim√©e", min_value=0.0, max_value= 1.0, step = 0.0001, format="%.4f", label_visibility='collapsed')

        if st.session_state.parametre == "Proportion":
            st.markdown("##### Marge d'erreur <span style='color:red;'>*</span>", unsafe_allow_html=True)
            with st.expander("En savoir plus ..."):
                st.info("La marge d'erreur permet de savoir correspond a la moiti√© de l'√©tendue de l'intervalle de confiance. C'est la valeur qui est ajout√©e et retranch√©e de la proportion estim√©e pour obtenir l'intervalle de confiance")
            st.session_state.marge = st.number_input("Marge d'erreur", min_value=0.0, max_value= 1.0, step = 0.0001, format="%.4f", label_visibility='collapsed')
        
        if st.session_state.parametre == "Moyenne":
            st.markdown("##### Marge d'erreur <span style='color:red;'>*</span>", unsafe_allow_html=True)
            with st.expander("En savoir plus ..."):
                st.info("La marge d'erreur permet de savoir correspond a la moiti√© de l'√©tendue de l'intervalle de confiance. C'est la valeur qui est ajout√©e et retranch√©e de la proportion estim√©e pour obtenir l'intervalle de confiance")
            st.session_state.marge = st.number_input("Marge d'erreur moy ", min_value= 0, label_visibility='collapsed')
    
    with col2:
        st.markdown("##### Niveau de confiance <span style='color:red;'>*</span>", unsafe_allow_html=True)
        with st.expander("En savoir plus ..."):
            st.info("Le niveau de confiance repr√©sente la probabilit√© que vous √™tes pr√™t √† accepter quant √† la possibilit√© que votre estimation soit incorrecte.")
        st.session_state.confiance = st.number_input("Niveau de confiance",min_value=0.0, max_value= 1.0, step = 0.0001, format="%.4f", label_visibility='collapsed')
        
        st.markdown("##### Taille de la population")
        with st.expander("En savoir plus ..."):
            st.info('Taille de la population : Le nombre total d‚Äôindividus dans la population √©tudi√©e. Ce param√®tre est utilis√© pour calculer la taille de l‚Äô√©chantillon.')
        st.session_state.population = st.number_input("Taille de la population", min_value = 1, value=st.session_state.taillePop, label_visibility='collapsed')

    
    with col3:
        st.markdown("##### Taux de r√©ponse <span style='color:red;'>*</span>", unsafe_allow_html=True)
        with st.expander("En savoir plus ..."):
            st.info("Le taux de r√©ponse est le pourcentage de personnes ayant r√©pondu √† un sondage par rapport au nombre total de personnes sollicit√©es. Assurez-vous d'atteindre ce taux de r√©ponse au risque de ne pas avoir des estimations pr√©cises.")
        st.session_state.tauxReponse = st.number_input("Taux de r√©ponse", min_value=0.0, max_value= 1.0, step = 0.0001, format="%.4f", label_visibility='collapsed')

        st.markdown("##### Effet de plan <span style='color:red;'>*</span>", unsafe_allow_html=True)
        with st.expander("En savoir plus ..."):
            st.info("L'effet de plan est un facteur utilis√© dans les enqu√™tes pour ajuster la taille d'√©chantillon n√©cessaire lorsque le plan d'√©chantillonnage diff√®re d'un simple √©chantillonnage al√©atoire. Il mesure l'impact du plan d'√©chantillonnage sur la pr√©cision des estimations. Si vous utilisez un plan d'√©chantillonnage stratifi√© ou en grappes, par exemple, l'effet de plan prend en compte la corr√©lation au sein des groupes ou des strates, ce qui peut augmenter la variance des estimations. Un effet de plan sup√©rieur √† 1 signifie que la taille de l'√©chantillon doit √™tre augment√©e pour maintenir la m√™me pr√©cision. Comme nous sommes dans le cas d'un sondage al√©atoire simple, l'effet de plan est de 1")
        st.session_state.tailleEffet =  st.selectbox("Effet de plan",[1], label_visibility='collapsed')




    # Calcul de la taille dans le cas d'une proportion
    if st.session_state.parametre == "Proportion":
        st.session_state.methode = SampleSize(param=PopParam.prop, method=SizeMethod.wald, strat=False)
    if st.session_state.parametre == "Proportion":
        if st.session_state.methode is not None and st.session_state.tailleEffet != 0 and st.session_state.tauxReponse != 0 and st.session_state.taillePop != 0 and st.session_state.marge != 0:
            def calcul_taille():
                st.session_state.methode.calculate(
                    target = st.session_state.prop_est, 
                    half_ci=st.session_state.marge,
                    deff=st.session_state.tailleEffet, 
                    resp_rate=st.session_state.tauxReponse,
                    pop_size = st.session_state.population,
                    alpha = 1 - st.session_state.confiance)
                st.session_state.echantillon = st.session_state.methode.samp_size
            st.session_state.calcul = st.button("Calculer la taille",help="Cliquer pour lancer le calcul de la taille",on_click=calcul_taille)


    # Calcul de la taille dans le cas d'une moyenne
    if st.session_state.parametre == "Moyenne":
        st.session_state.methode = SampleSize(param=PopParam.mean, method=SizeMethod.wald, strat=False)
    if st.session_state.parametre == "Moyenne":
        if st.session_state.methode is not None and st.session_state.tailleEffet != 0 and st.session_state.tauxReponse != 0 and st.session_state.taillePop != 0 and st.session_state.marge != 0:
            def calcul_taille():
                st.session_state.methode.calculate(
                    sigma = st.session_state.sigma,
                    half_ci=st.session_state.marge,
                    deff=st.session_state.tailleEffet, 
                    resp_rate=st.session_state.tauxReponse,
                    pop_size = st.session_state.population,
                    alpha = 1 - st.session_state.confiance)
                st.session_state.echantillon = st.session_state.methode.samp_size
            st.session_state.calcul = st.button("Calculer la taille",help="Cliquer pour lancer le calcul de la taille",on_click=calcul_taille)

    if st.session_state.calcul:
        st.markdown("<h1 style='color:#2fd5cf; text-align: center;'>R√©sultats </h1>", unsafe_allow_html=True)
        cola, colb, colc= st.columns(3)
        with cola:
            st.write(f"#### **Taille d'√©chantillon**:", st.session_state.echantillon)
            if st.session_state.population is not None:
                st.session_state.tauxSondage = round(st.session_state.echantillon / st.session_state.population,4)
                st.write("**Taux de sondage**: ",st.session_state.tauxSondage)
            if st.session_state.df is not None:
                with st.expander("Plus d'options"):
                    st.write("*Echantillon tir√©*",unsafe_allow_html=True)
                    st.session_state.base_echant = st.session_state.df.sample(n = st.session_state.echantillon, random_state = 42)
                    AgGrid(st.session_state.base_echant)
            
        with colb:
            # Fonction pour g√©n√©rer une image √† partir d'une formule LaTeX
            def generate_latex_image(formula, fontsize=30):
                fig, ax = plt.subplots()
                ax.text(0.5, 0.5, f'${formula}$', fontsize=fontsize, ha='center', va='center')
                ax.axis('off')

                # Sauvegarder l'image dans un buffer m√©moire
                img_buffer = io.BytesIO()
                plt.savefig(img_buffer, format='png', bbox_inches='tight', pad_inches=0.1)
                plt.close(fig)
                img_buffer.seek(0)
                
                return img_buffer

            # Fonction pour g√©n√©rer le rapport dans un fichier Word
            if st.session_state.type == 'Simple':
                def generate_report():
                    # Cr√©er un document Word
                    doc = Document()
                    # Ajouter un titre
                    doc.add_heading('Rapport des r√©sultats', 0)
                    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    doc.add_paragraph(f'G√©n√©r√© le : {current_time}')
                    # Texte introductif
                    doc.add_paragraph("L'application SamPower est un outil puissant d√©di√© √† la r√©alisation de sondages et √† l'estimation des param√®tres statistiques essentiels. Con√ßue pour √™tre √† la fois intuitive et accessible, elle permet aux utilisateurs d'effectuer des √©chantillonnages de mani√®re rapide et efficace, que ce soit pour des sondages al√©atoires simples ou stratifi√©s. Son importance r√©side dans sa capacit√© √† offrir des r√©sultats fiables tout en simplifiant le processus complexe de calcul de taille d'√©chantillon, un √©l√©ment cl√© pour garantir des r√©sultats statistiquement repr√©sentatifs dans le cadre d'√©tudes quantitatives. Le pr√©sent rapport est structur√© de la mani√®re suivante :")
                    doc.add_paragraph("- Pr√©sentation des param√®tres d'entr√©e et des r√©sultats : Cette section regroupe l'ensemble des r√©sultats obtenus ainsi que les diff√©rents param√®tres entr√©s par l'utilisateur.")            
                    doc.add_paragraph("- Pr√©sentation des explications et de la m√©thodologie utilis√©e : Ici, nous d√©taillons la m√©thodologie employ√©e pour g√©n√©rer les r√©sultats, notamment la logique derri√®re les formules et les m√©thodes statistiques appliqu√©es.")
                    # Ajouter des informations sur la m√©thode
                    doc.add_heading("Pr√©sentation des param√®tres d'entr√©e et des r√©sultats", level = 1)
                    doc.add_heading('Param√®tre √† estimer :', level=2)
                    doc.add_paragraph(f"Param√®tre : {st.session_state.parametre}")
                    # Ajouter les param√®tres d'entr√©e
                    doc.add_heading('Param√®tres d\'entr√©e :', level=2)
                    if st.session_state.parametre == "Proportion":
                        doc.add_paragraph(f"Proportion estim√©e : {st.session_state.prop_est}")
                    if st.session_state.parametre == "Moyenne":
                        doc.add_paragraph(f"Ecart-type estim√© : {st.session_state.sigma}")
                    doc.add_paragraph(f"Erreur Marginale : {st.session_state.marge}")
                    doc.add_paragraph(f"Niveau de confiance : {st.session_state.confiance * 100}%")
                    doc.add_paragraph(f"Taille de la population : {st.session_state.population}")
                    doc.add_paragraph(f"Taux de r√©ponse : {st.session_state.tauxReponse * 100}%")
                    doc.add_paragraph(f"Effet de plan : {st.session_state.tailleEffet * 100}%")
                    if st.session_state.population is not None:
                        doc.add_paragraph(f"Taux de sondage : {st.session_state.tauxSondage * 100}%")


                    # Afficher les r√©sultats d'entr√©e
                    doc.add_heading('R√©sultats :', level=2)
                    doc.add_paragraph(f"Taille de l'√©chantillon calcul√©e : {st.session_state.echantillon}")
                    doc.add_page_break()

                    # Ajouter des explications
                    doc.add_heading('Explications et m√©thodologie utilis√©e', level=1)
                    doc.add_heading('Explication des r√©sultats :', level=2)
                    doc.add_paragraph(f"Sur la base des param√®tres d√©finis par l'utilisateur, tels que la marge d'erreur, le niveau de confiance et la taille de la population, le calcul a d√©termin√© qu'un √©chantillon optimal de {st.session_state.echantillon} individus est n√©cessaire pour garantir que les r√©sultats de l'enqu√™te soient repr√©sentatifs. Ce nombre permet de s'assurer que les estimations issues de l'enqu√™te respectent la pr√©cision statistique souhait√©e tout en maintenant un niveau de confiance √©lev√©. Ce calcul prend √©galement en compte les hypoth√®ses formul√©es sur la proportion attendue dans la population.")

                # Formule de la m√©thode de Wald
                    if st.session_state.parametre == 'Proportion':
                        doc.add_heading('Formule de calcul', level = 2)
                        doc.add_paragraph('La formule de calcul utilis√©e est la suivante:')
                        formula = r'n = \frac{Z^2 \cdot p \cdot (1 - p)}{e^2}'
                        img_buffer = generate_latex_image(formula)
                        doc.add_picture(img_buffer, width=Inches(3))
                        doc.add_paragraph("Avec n la taille de l'√©chantillon, Z le niveau de confiance, p la proportion estim√©e et e la marge d'erreur")
                        
                        doc.add_heading('M√©thodologie', level = 2)
                        doc.add_paragraph("La m√©thode utilis√©e dans le calcul de la taille de l'√©chantillon est la m√©thode de Wald")

                    # Sauvegarder le fichier Word en m√©moire
                    report_io = io.BytesIO()
                    doc.save(report_io)
                    report_io.seek(0)
                    return report_io
            #st.markdown("### Rapport des r√©sultats")

            # T√©l√©charger le rapport si l'utilisateur clique sur le bouton
            if st.session_state.type == 'Simple':
                report_file = generate_report()
            # T√©l√©charger le rapport
            st.download_button(label="T√©l√©charger le Rapport", data=report_file, file_name="rapport_sondage.docx", mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document")

        with colc:
            # Fonction pour cr√©er un fichier Excel en m√©moire
            def to_excel(df):
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    df.to_excel(writer, index=False, sheet_name='Sheet1')
                return output.getvalue()

            if st.session_state.base_echant is not None:
                #st.markdown('### T√©l√©charger la base de donn√©es')

                if st.session_state.type == 'Simple':
                    excel_data = to_excel(st.session_state.base_echant)

            # Ajouter un bouton de t√©l√©chargement
                st.download_button(
                    label="T√©l√©charger l'√©chantillon sous format Excel",
                    data=excel_data,
                    file_name='Echantillon.xlsx',
                    mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                )





                        









